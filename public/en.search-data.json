{"/i4ox-knowledge-base/docs/":{"data":{"моя-база-знаний#Моя база знаний":"Моя база знаний Мои заметки о Debian Мои заметки о Docker Мои заметки о Git Мои заметки о Linux Мои заметки о Rocky Linux Мои заметки о SSH "},"title":"_index"},"/i4ox-knowledge-base/docs/docker/%D0%B0%D1%80%D1%85%D0%B8%D1%82%D0%B5%D0%BA%D1%82%D1%83%D1%80%D0%B0-docker/":{"data":{"union-filesystem#Union Filesystem":"Ищите в отдельном пункте про Docker.","архитектура-docker#Архитектура Docker":"Архитектура DockerDocker состоит из следующих копмонентов:\nдемон: ответственен за создание, запуск и контроль работы контейнера, за создание и хранения образов; клиент: используется для общения с демоном по протоколу http; реестр: используется для хранения и распространения образов. ","драйвер-выполнения#Драйвер выполнения":"Docker использует “драйвер выполнения” для создания контейнеров. По-умолчанию выбирается собственный runc, но также поддерживается LXC.\n“Драйвер выполнения” тесно связан со следующими механизмами ядра:\ncgroups - отвечает за управления ресурсами системы, используется также для docker pause; namespaces - отвечает за управление процессами внутри контейнера; ","система-безопасности#Система безопасности":"Docker поддерживает SELinux и AppArmor для того, чтобы настроить более строгую среду безопасности.","сопроваждающие-плагины#Сопроваждающие плагины":"Docker на текущий момент предоставляет следующие технологии(плагины):\nDocker Swarm - решает задачу кластеризации в Docker. Deprecated в пользу k8s; Docker Compose - инструмент для создания и выполнения приложения, созданных из нескольких контейнеров; Docker Machine - позволяет устанавливать и конфигурировать Docker на локальных и удаленных ресурса. Deprecated; Docker Desktop - инструмент для удобного управления контейнерами с GUI; Docker Tristed Registry - локально устанавливаемая система для управления образами Docker. Стоит отметить, что есть возможность замены компонентов сторонними наработками."},"title":"архитектура docker"},"/i4ox-knowledge-base/docs/docker/%D0%B7%D0%B0%D0%BF%D1%83%D1%81%D0%BA-docker-%D0%B1%D0%B5%D0%B7-sudo/":{"data":{"запуск-docker-без-sudo#Запуск Docker без sudo":"Запуск Docker без sudoНужно просто добавить пользователя в нужную группу, а затем перезапустить docker.\nsudo usermod -aG docker $USER sudo systemctl restart docker "},"title":"запуск docker без sudo"},"/i4ox-knowledge-base/docs/docker/%D0%BA%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D0%B0-run/":{"data":{"запуск-командной-оболочки#Запуск командной оболочки":" docker run -it \u003ccontainer-name\u003e /bin/bash ","команда-run#Команда run":"Команда runЗдесь приведены все заметки, необходимые для работы с командой run.","флаги#Флаги":" i - интерактивная оболочка t - запуск tty h - задаем имя хоста(меняем содержимое CONTAINER) rm - удаляет остановленные контейнер, после остановки работоспосбосности name - позволяте задать имя контейнеру d - указывает, что нужно запустить контейнер в фоновом режиме link - позволяет связать контейнеры единой сетью. v - монтирование раздела volumes-from - монтирование разделов из другого контейнера "},"title":"команда run"},"/i4ox-knowledge-base/docs/docker/%D0%BE%D1%81%D0%BD%D0%BE%D0%B2%D0%BD%D1%8B%D0%B5-%D0%BA%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D1%8B/":{"data":{"docker-build#docker build":"","docker-commit#docker commit":"","docker-diff#docker diff":"","docker-inspect#docker inspect":"","docker-login#docker login":"Основные командыdocker run Подробнее в пункте команда run.\ndocker ps Выводит информацию о контейнерах, запущенных в текущий момент.\ndocker ps fervent_bohr Через флаг -a можно вывести все контейнеры, включая остановленные.\ndocker ps -a docker inspect Позволяет просматреть более детальную информацию о контейнере.\ndocker inspect fervent_bohr | grep IPAddress docker inspect --format {{.NetworkSettings.IPAddress}} fervent_bohr docker diff P.S: Docker использует файловую систему UnionFS\nПоказывает какие файлы были изменены в работающем контейнере.\ndocker diff fervent_bohr docker logs Выводит все событий(команды), которые происходили внутри контейнера.\ndocker logs fervent_bohr docker rm Удаляет контейнер.\ndocker rm fervent_bohr Чтобы удалить все остановленные контейнеры(желательно создать alias).\ndocker rm -v $(docker ps -aq -f status=exited) docker commit Сохраняет контейнер, делая из него образ.\ndocker commit cowsay test/cowsayimage После чего можно использовать контейнер.\ndocker run test/cowsayimage /usr/games/cowsay \"Moo\" docker build Позволяет создать образ на основе Dockerfile.\nФлаги:\nt - позволяет явно прописать тег docker build -t test/testimage . docker login Позволяет зарегистрироваться в реестре.","docker-logs#docker logs":"","docker-ps#docker ps":"","docker-pull#docker pull":"Загрузка образа из реестра\ndocker pull amount/revealjs:latest ","docker-push#docker push":"Загрузка образа в реестр\ndocker push amount/revealjs Надо чтобы название репозитория совпадала с вашим юзернеймом.","docker-rm#docker rm":"","docker-run#docker run":"","docker-stop#docker stop":"Останавливает работу контейнера.\ndocker stop i4ox_redis ","основные-команды#Основные команды":""},"title":"основные команды"},"/i4ox-knowledge-base/docs/docker/%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0-%D1%81-%D1%80%D0%B5%D0%B5%D1%81%D1%82%D1%80%D0%BE%D0%BC/":{"data":{"иерархическая-система#Иерархическая система":"Для хранения образов применяется иерархическая система. При этому используется следующие термины:\nregistry: сервис, отвечающий за хранения и распространение образов; repository: набор взаимосвязанных образов(например, разные версии одного образа. docker:bookworm docker:bullsye); tag: идентификатор, присваиваемый образам внутри репозитория. Пример: docker pull amount/revealjs:latest - скачает образ с тегом latest из репозитория amount/revealjs c реестра Docker Hub.","работа-с-реестром#Работа с реестром":"Работа с реестром"},"title":"работа с реестром"},"/i4ox-knowledge-base/docs/docker/%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BE%D0%B1%D1%80%D0%B0%D0%B7%D0%BE%D0%B2-%D0%B8%D0%B7-dockerfile/":{"data":{"ключевые-команды#Ключевые команды":" FROM - определяет базовый ОС. RUN - определяет команды, исполняемые в командной оболочке внутри образа. ENTRYPOINT - определяет точку входа внутри образа. То что будет выполняться при запуске. LABEL - определяет метки образа. ","пример-простого-dockerfile#Пример простого Dockerfile":" FROM debian:bookworm-slim RUN apt-get update \u0026\u0026 apt-get install -y cowsay fortune ","создание-образов-из-dockerfile#Создание образов из Dockerfile":"Создание образов из Dockerfile"},"title":"Создание образов из Dockerfile"},"/i4ox-knowledge-base/docs/docker/%D1%83%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B0/":{"data":{"установка-docker#Установка Docker":"Установка DockerСуществует несколько способов установки Docker:\nЧерез пакетный менеджер, такие как apt-get, pacman, dnf, brew; Установить Docker Desktop и docker установится сам; Через скрипт с сайта https://get.docker.com. Рекомендуется использовать последний способ, он и описан ниже:\ncurl https://get.docker.com \u003e /tmp/install.sh sudo chmod +x /tmp/install.sh /tmp/install.sh "},"title":"установка"},"/i4ox-knowledge-base/docs/docker/ufs/":{"data":{"ufs---unified-filesystem#UFS - Unified Filesystem":"UFS - Unified FilesystemUFS в Docker — это файловая система, которая позволяет объединять несколько файловых систем в одну виртуальную файловую систему. В контексте Docker, UFS играет ключевую роль в организации образов и контейнеров. Вот как это работает:\nМногоуровневое хранение: Docker-образы состоят из нескольких слоев. Каждый слой представляет собой набор файлов и директорий. Эти слои накладываются друг на друга, образуя конечный образ контейнера. Копирование при записи (Copy-on-Write): Когда контейнер запускается из образа, создается новый слой, куда записываются все изменения. Этот подход позволяет экономить пространство и ускорять работу, так как неизменные данные используются совместно между контейнерами. Модульность и повторное использование: Различные слои могут быть использованы повторно в других образах, что делает создание и обновление образов более эффективным. Если базовый слой не изменился, его не нужно загружать заново. Изолированность: Каждый контейнер видит только свою файловую систему, что обеспечивает изоляцию приложений друг от друга. Примеры UFS, которые используются в Docker, включают AUFS, OverlayFS и Btrfs. Каждый из них имеет свои особенности, но все они предоставляют функциональность объединения слоев файловых систем.","слои-в-docker#Слои в Docker":"Образы Docker состоят из нескольких слоев. Каждый слой - защищенная от записи файловая система.\nДля каждой инструкции в Docker создается собственный слой, который записывается поверх предыдущего.","состояния-контейнера#Состояния контейнера":" Создан(created) Перезапуск(restarting) Активен(running) Приостановлен(paused) Остановлен(exited) "},"title":"UFS"},"/i4ox-knowledge-base/docs/git/%D0%BA%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D1%8B-git/":{"data":{"git-add#git add":"","git-clone#git clone":"","git-commit#git commit":"","git-config#git config":"","git-diff#git diff":"","git-fetch#git fetch":"Позволяет подгрузить изменение с определенного удаленного репозитория.\ngit fetch origin git remote add i4ox https://github.com/i4ox/dotfiles.git git fetch i4ox ","git-help#git help":"","git-init#git init":"","git-log#git log":"","git-mv#git mv":"","git-pull#git pull":"Тот же git fetch, но для основного сервера, как правило, и более прост в использовании.\ngit pull ","git-push#git push":"Отправка изменений в удаленный репозиторий.\ngit push origin master # Сначала указывается репозиторий, потом ветка ","git-remote#git remote":"Позволяет взаимодействовать с удаленными репозиториями.\ngit remote # выведет названия доступных удаленных репозиториев git remote -v # выведет адреса привязанные к репозиторию git remote add origin https://github.com/i4ox/dotfiles.git # Позволяет добавить удаленный репозиторий под именем origin git remote show origin # позволяет просматривать удаленный репозиторий git remote rename origin i4ox # Позволяет переименовать удаленный репозиторий git remote remove i4ox # Позволяет удалить удаленный репозиторий ","git-restore--git-reset#git restore / git reset":"Команды gitgit help Выводит справочную информацию о той или иной команде.\ngit help add git config Позволяет взаимодействовать с конфигурацией git.\ngit config --global user.name \"John Doe\" git config --global user.email \"qJkZK@example.com\" git config --list --show-origin git init Инициализирует новый проект.\ngit init git add Индексирует указанные файлы.\ngit add --all # Все файлы git add *.md # С определенным расширением git add . # Все файлы в корне(кроме скрытых) git add README.md # Определенный файл/директория git commit Делает коммит с проиндексированными файлами.\ngit commit git commit -m \"commit message\" # Добавляет сообщение к комиту git commit -a # Заставляет проиндексировать файлы ранее проиндексированные в предыдущих коммитах git commit --amend # Отменяет предыдущий коммит, переопределяет его git clone Клонирует существующий репозиторий.\ngit clone https://github.com/i4ox/dotfiles.git # По https git clone git@github.com:i4ox/dotfiles.git # По ssh git clone git@github.com:i4ox/dotfiles.git ~/Projects/dotfiles # Клонирование в определенное место git status Позволяет просматривать состояние файлов(Untracked, Unmodified, Modified, Staged).\ngit status git status -s # Сокращенный вывод git status content/ # Проверить статус определенного файла или файлов в директории git diff Позволяет просматривать отдельные файлы на изменение содержимого.\ngit diff git diff --staged #(--cached) Только по отношению к файлам с состоянием Staged git diff README.md # Для конкретного файла или директории git rm Удаление файла из индексации репозитория.\ngit rm README.md git rm -f README.md # Удалить принудительно git mv Команда чтобы переименовать файл.\ngit mv README.md README Является alias для команд ниже:\nmv README.md README git rm README.md git add README git log Позволяет просматривать историю коммитов.\ngit log git log --graph --decorate --oneline # Чаще всего используется git log --stat # Краткая статистика git restore / git reset git restore это современная замена git reset.\nОтменяет индексацию файла.\ngit add README.md git restore --staged README.md ","git-rm#git rm":"","git-status#git status":"","команды-git#Команды git":""},"title":"команды git"},"/i4ox-knowledge-base/docs/git/%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0-git/":{"data":{"настройка-git#Настройка git":"Настройка gitНастройка git происходит через git config.","настройки#Настройки":"user.name и user.email Первое, что следует настроить эту имя и почту пользователя. Например:\ngit config --global user.name \"John Doe\" git config --global user.email \"qJkZK@example.com\" core.editor Git нам позволяет явно указать редактор, который стоит использовать для коммитов, разрешения конфликтов и так далее. По-умолчанию значение считывается из переменной среды $EDITOR.\ngit config --global core.editor nvim init.defaultBranch Ветка, с которой проект создается по-умолчанию.\ngit config --global init.defaultBranch main pull.rebase Какое поведение git использовать при получении изменений.\ngit config --global pull.rebase false # способ по-умолчанию git config --global pull.rebase true # с использованием перебазирования ","хранения-настроек#Хранения настроек":"Настройки могут храниться в трех местах:\n/etc/gitconfig, если использовать git config --system; ~/.gitconfig если использовать git config --global; .git/config если использовать git config --local. Чтобы просмотреть все существующие настройки:\ngit config --list --show-origin "},"title":"настройка git"},"/i4ox-knowledge-base/docs/git/%D1%83%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B0-git/":{"data":{"установка-git#Установка Git":"Установка GitGit можно установить либо из официального репозитория:\nsudo apt-get install -y git Либо из исходников:\nsudo apt-get install -y install-info dh-autoreconf libcurl4-gnutls-dev libexpat1-dev gettext libz-dev libssl-dev sciidoc xmlto docbook2x sudo ln -s /usr/bin/db2x_docbook2texi /usr/bin/docbook2x-texi tar -zxf git-2.39.2.tar.gz cd git-2.39.2 make configure ./configure --prefix=/usr make all doc info sudo make install install-doc install-html install-info "},"title":"установка git"},"/i4ox-knowledge-base/docs/linux/%D1%82%D1%80%D0%B0%D0%B1%D0%BB%D1%88%D1%83%D1%82%D0%B8%D0%BD%D0%B3/":{"data":{"логи#Логи":"Зачастую логи хранятся в /var/log.\nЛоги от ядра Linux Чтобы просмотрить логи ядра:\nsudo dmesg -T ","нагрузка-на-cpu-ram-диски#Нагрузка на CPU, RAM, диски":"Для начала надо установить необходимые пакеты.\nsudo apt-get install -y sysstat iotop Нагрузка на диски Тут есть две команды, которые надо знать iostat и iotop.\niostat - используется для вывода информации о загруженности диска.\niotop - выводит информацию о процессах, что взаимодействуют с диском.\niostat sudo iotop Утилита top %CPU(s) - режимы работы процессора(us - пользовательский режим, system - для ядра, nice - процессы с измененным приоритетом, idle - простой, wait - ожидание завершения I/O, hardware и software - прерывания, steel - украденное время гипервизором) Load Average - показывает среднее время выполнения процессов, а также ввода/вывода Память Всю информацию о памяти можно посмотреть в файле /proc/meminfo.\nТакже можно использовать:\nfree -m vmstat top ","процессы#Процессы":"Чтобы просмотреть все процессы можно использовать команду ниже:\nps aux Можно просмотреть статус определенного демона:\nsystemctl status docker Чтобы отдебажить процессы и найти проблему, можно использовать strace","сети#Сети":"Анализ сетевых процессов Установка утилит:\nsudo apt-get install -y net-tools Чтобы просмотреть информацию по сетевым процессам:\nnetstat -tulpn # or ss -lntu Инфомацию о сетевых интерфейсах Банальный ip a или ifconfig.\nИнформация о сетевых маршрутах Чтобы просмотреть необходимую информацию нужно использовать команду ниже:\nnetstat -rn # or ip r Диагностика сети Через команду ping можно проверить dns resolving. Команда traceroute показывает путь пакетов. Через команду mtr можно проделать аналогичное команде traceroute, но в живую. И просматреть где теряются пакеты. Через команду dig можно просмотреть DNS. Через команду tcpdump можно проверить доступность пакетов и доходят ли они. ","состояние-дисков#Состояние дисков":"Проверка оставшегося места на жестких дисках df -h # Можно сделать alias df=\"df -h\" Если надо в inode:\ndf -i Проверка сколько места занимает тот или иной файл Команда ниже, например, выводит информацию обо всех файлах в /tmp.\nsudo du -h /tmp/* Анализ жестних дисков(которые ни Nvme, ни SSD) Для этого используются Self-Monitoring, Analysis and Reporting Technology, или по-простому SMART.\nsudo apt-get install -y smartmontools sudo smartctl -a /dev/sdb Утилиту smartctl можно использовать и на NVme, SSD дисках, но там будут использоваться не SMART-контракты. Так как их нету у такого типа дисков, утилита просто соберет информацию, которой обладает система.\nПросмотр информации о raid-ах Нужную информацию о raid-ах можно узнать командой ниже:\ncat /proc/mdstat ","траблшутинг-серверов-linux#Траблшутинг серверов Linux":"Траблшутинг серверов LinuxНиже приведены команды для анализа сервера в той или иной ситуации."},"title":"траблшутинг"},"/i4ox-knowledge-base/docs/rocky_linux/":{"data":{"rocky-linux#Rocky Linux":"Rocky Linux"},"title":"_index"},"/i4ox-knowledge-base/docs/rocky_linux/%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0-%D0%B2%D0%B8%D0%B4%D0%B5%D0%BE%D0%BA%D0%B0%D1%80%D1%82%D1%8B/":{"data":{"#":"Настройка видеокартыNvidia Установка заголовков и необходимых пакетов для ядра. sudo dnf install kernel-devel kernel-headers pciutils dkms Установка драйвера Nvidia sudo dnf install akmod-nvidia sudo dnf install xorg-x11-drv-nvidia-cuda ","настройка-видеокарты#Настройка видеокарты":""},"title":"настройка видеокарты"},"/i4ox-knowledge-base/docs/rocky_linux/%D0%BE%D0%B1%D0%BD%D0%BE%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D1%8B/":{"data":{"автоматическое-обновление#Автоматическое обновление":" Устанавливаем dnf-automatic sudo dnf install dnf-automatic Настройка сервиса sudo nano -W /etc/dnf/automatic.conf # update_type = security Запускаем сервис(демона) sudo systemctl enable dnf-automatic-install.timer sudo systemctl status dnf-automatic-install sudo systemctl cat dnf-automatic-install.timer ","обновление-системы#Обновление системы":"Обновление системы","ручное-обновление#Ручное обновление":" Проверяем есть ли обновления sudo dnf check-update Устанавливаем только необходимые баг-фиксы sudo dnf updgrade-minimal Обновляем все sudo dnf update "},"title":"обновление системы"},"/i4ox-knowledge-base/docs/rocky_linux/%D1%83%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B0-%D1%82%D0%B5%D0%BC%D1%8B/":{"data":{"#":"Установка темыУстановку темы я буду производить на примере Arc Dark.\nУстановка GTK темы Устанавливаем зависимости sudo dnf install meson ninja-build sassc glib2-devel inkscape gnome-themes-extra gtk-murrine-engine Собираем тему git clone https://github.com/jnsh/arc-theme --depth 1 cd arc-theme meson setup --prefix=$HOME/.local -Dvariants=dark -Dthemes=gnome-shell,gtk2,gtk3,gtk4,metacity,plank build/ meson install -C build/ mv ~/.local/share/themes/* ~/.themes/ Установка KDE темы Скоро будет…","установка-темы#Установка темы":""},"title":"установка темы"},"/i4ox-knowledge-base/docs/rocky_linux/epel-%D0%B8-rpmfusion/":{"data":{"extra-packages-for-enterprise-linux-и-rpmfusion#Extra Packages For Enterprise Linux и RPMFusion":"Extra Packages For Enterprise Linux и RPMFusion Установка EPEL sudo dnf config-manager --set-enabled crb sudo dnf install epel-release sudo /usr/bin/crb enable Установка RPMFusion sudo dnf install --nogpgcheck https://dl.fedoraproject.org/pub/epel/epel-release-latest-$(rpm -E %rhel).noarch.rpm sudo dnf install --nogpgcheck https://mirrors.rpmfusion.org/free/el/rpmfusion-free-release-$(rpm -E %rhel).noarch.rpm https://mirrors.rpmfusion.org/nonfree/el/rpmfusion-nonfree-release-$(rpm -E %rhel).noarch.rpm "},"title":"EPEL и RPMFusion"},"/i4ox-knowledge-base/docs/ssh/":{"data":{"ssh#SSH":"SSH","ssh-agent#SSH-agent":"ssh-agent - менеджер ключей для SSH. Он хранит ваши ключи и сертификаты в памяти, незашифрованные и готовые к использованию ssh. Это избавляет вас от необходимости вводить пароль каждый раз, когда вы подключаетесь к серверу. Он работает в фоновом режиме в вашей системе, отдельно от ssh, и обычно запускается при первом запуске ssh.\nЧтобы добавить пароль от приватного ключа:\nssh-add ~/.ssh/key ","ssh-copy-id#SSH-copy-id":"Чтобы скопировать ключ на сервер используем комманду ниже:\nssh-copy-id -i ~/.ssh/key user@host Не забываем про выдачу необходимых прав.\nchown -R user:user /home/user/.ssh chmod 700 ~/.ssh chmod 644 ~/.ssh/* chmod 600 ~/.ssh/id_* ~/.ssh/authorized_keys ","sshd_config#sshd_config":"Лучшие практики Меняем порт с 22 на любой другой PermitRootLogin no PubkeyAuthentication yes PasswordAuthencication no (исключительно после настройки ключей) PermitEmptyPasswords no (не имеет смысла, если соблюдать 4 пункт) ","генерация-ssh-ключей#Генерация ssh-ключей":" ssh-keygen -t ed25519 -f ~/.ssh/key -C \"comment\" ","настройки-клиента#Настройки клиента":"Клиент SSH настраивается через файл ~/.ssh/config.\nПример настроек:\nHost server StrictHostKeyChecking no User sampleuser ForwardAgent yes IdentityFile /Users/username/.ssh/id_rsa IdentitiesOnly yes UserKnownHostsFile=/dev/null UseKeychain yes AddKeysToAgent yes ServerAliveInterval 60 ServerAliveCountMax 1200 Далее делается подключение через команду ниже:\nssh server ","подключение-по-ssh#Подключение по SSH":" ssh -i ~/.ssh/key user@host ","пробрасывание-портов#Пробрасывание портов":" ssh -L 9000:localhost:8000 user@server Командой выше мы создали подключение через SSH-туннель, с пробросом внешнего 8000 порта на локальный 9000 порт. И после этого НЕ ЗАКРЫВАЯ соединения, в другой вкладке терминала мы сможет обращаться по этому порту."},"title":"_index"},"/i4ox-knowledge-base/profile/":{"data":{"немножко-обо-мне#Немножко обо мне":"Увлечения Введение блога по Linux/DevOps. Чтение книг(либо фэнтези, либо тех. литература, когда как) Разработка своей сборки NeoVim, которая бы покрывала все нужды DevOps. Мои цели Начать делать технический контент(статьи, видео). Мне нравится суть идеи такого подхода как Developer Advocate. Окончательно разобраться в написании и настройке кластеров Kubernetes с нуля(без преднастроенных кластеров с облаков). Мои контакты Мои проекты Knowledge Base - сайт со всеми моими заметками, а также блог. NvOps - Neovim-сборка для DevOps. ibmc_flutter_app_template и ibmc_blood_metabograms - открытый код проекта от ИБМХ, точнее та часть которую я использовал для курсовой на втором курсе. ","образование#Образование":"МИРЭА - 09.03.04 Программная Инженерия На данный момент нахожусь на 3 курсе по направлению Программная Инженерия в МИРЭА.\nМИРЭА - Второе высшее образование - Технологии DevOps На момент конца 2 курса имеется законченное второе высшее образование по направлению DevOps. Выпускная курсовая работа(диплом) был закрыт на отлично.\nВАЖНО: Диплом о завершении второго высшего выдается после окончания первого, так что на руках его не имеется.","приветствую#Приветствую!":"Приветствую!Меня зовут Артур(Лохов Артур Петрович), данная страница моего сайта посвешена краткой информации обо мне, выступает в роли резюме.","стек-технологий#Стек технологий":"На текущий момент я владею следующими навыками:\nAtlassian-стек: Jira, Confluence, BitBucket CI/CD: Jenkins, Github Actions VM: VMWare, Proxmax Linux: RHEL-based, Debian, Gentoo Rocky Linux моя основная машина; Debian использую почти на всех серверах; На Gentoo у меня настроен роутер - ну не захотел я OpenWrt :) Контейнеры: Docker, K8s, Helm Написание скриптов, программирование: Go, Python, Bash Go для написание провайдером для Tf; Python из-за удобных инструментов и надобности их настройки и запуска; Bash - без него ни куда, вода и хлеб. "},"title":"index"}}